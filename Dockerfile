# Multi-stage build para otimizaÃ§Ã£o
FROM node:18-alpine AS builder

# ðŸ”§ ARGs para variÃ¡veis de ambiente
ARG VITE_API_URL

# Definir diretÃ³rio de trabalho
WORKDIR /app

# ðŸ”§ Debug: mostrar valor da variÃ¡vel
RUN echo "ðŸ”§ VITE_API_URL recebido: $VITE_API_URL"

# Copiar arquivos de dependÃªncias
COPY package*.json ./
COPY bun.lockb ./

# Instalar TODAS as dependÃªncias (incluindo devDependencies para o build)
RUN npm ci

# Copiar cÃ³digo fonte
COPY . .

# ðŸ”§ Build da aplicaÃ§Ã£o com variÃ¡veis de ambiente
RUN echo "ðŸ”§ Iniciando build com VITE_API_URL: $VITE_API_URL" && \
    VITE_API_URL="$VITE_API_URL" npm run build

# Stage de produÃ§Ã£o
FROM nginx:alpine AS production

# Instalar wget para health check
RUN apk add --no-cache wget

# Copiar build da aplicaÃ§Ã£o
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configuraÃ§Ã£o customizada do nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Expor porta 82
EXPOSE 82

# Health check corrigido
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://127.0.0.1:82/health || exit 1

# Comando para iniciar nginx
CMD ["nginx", "-g", "daemon off;"]
